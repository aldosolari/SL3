# MARGINAL VS CONDITIONAL COVERAGE----------------------------

library(conformalInference)

# DATA GENERATION---------------------------------------------

alpha = 0.1
set.seed(123)

n = 100
x = runif(n,-5,5)
y = 1/4 * (x+4) * (x+1) * (x-2) + rnorm(n, mean = 1, sd = 2)
plot(x,y)

n0 = 100
x0 = runif(n0,-5,5)
y0 = 1/4 * (x0+4) * (x0+1) * (x0-2) + rnorm(n0, mean = 1, sd = 2)
o = order(x0)

# POLYNOMIAL REGRESSION----------------------------------------

res_lm = predict(lm(y ~ poly(x,degree=3)), 
          newdata=data.frame(x=x0), 
          interval = "prediction",
          level = 1-alpha)
cov_lm = res_lm[,2] <= y0 & y0 <= res_lm[,3]
len_lm = res_lm[,3] - res_lm[,2]

plot(c(), c(), 	xlab="x", ylab="y", 
 		xlim=range(x0), ylim=range(c(y0,res_lm[,2],res_lm[,3])), 
		col="white",
     		main=paste0("Polynomial regression \n",
       		sprintf("Coverage: %0.3f, Average Length: %0.3f",
               	mean(cov_lm),mean(len_lm)))) 
polygon(c(x0[o],rev(x0[o])), 
	c(res_lm[o,2],rev(res_lm[o,3])),
        col="pink", border=NA)
lines(x0[o], res_lm[o,1], lwd=2, col="red")
points(x, y ,col="lightgray")


# CONFORMAL PREDICTION REGRESSION LINE-----------------------

funs = lm.funs()

res_cp = conformal.pred.split(x, y, x0, alpha=alpha,
			 train.fun=funs$train, 
			 predict.fun=funs$predict)
cov_cp = res_cp$lo <= y0 & y0 <= res_cp$up
len_cp = res_cp$up - res_cp$lo

plot(c(), c(), 	xlab="x", ylab="y", 
 		xlim=range(x0), ylim=range(c(y0,res_cp$lo,res_cp$up)), 
		col="white",
     		main=paste0("Conformal prediction \n",
       		sprintf("Coverage: %0.3f, Average Length: %0.3f",
               	mean(cov_cp),mean(len_cp)))) 
polygon(c(x0[o],rev(x0[o])), 
	c(res_cp$lo[o],rev(res_cp$up[o])),
        col="pink", border=NA)
lines(x0[o], res_cp$pred[o], lwd=2, col="red")
points(x, y ,col="lightgray")


# CONFORMAL PREDICTION REGRESSION TREE-----------------------

funs = rf.funs(ntree = 1, varfrac = 1)

res_cp = conformal.pred.split(x, y, x0, alpha=alpha,
			 train.fun=funs$train, 
			 predict.fun=funs$predict)
cov_cp = res_cp$lo <= y0 & y0 <= res_cp$up
len_cp = res_cp$up - res_cp$lo

plot(c(), c(), 	xlab="x", ylab="y", 
 		xlim=range(x0), ylim=range(c(y0,res_cp$lo,res_cp$up)), 
		col="white",
     		main=paste0("Conformal prediction \n",
       		sprintf("Coverage: %0.3f, Average Length: %0.3f",
               	mean(cov_cp),mean(len_cp)))) 
polygon(c(x0[o],rev(x0[o])), 
	c(res_cp$lo[o],rev(res_cp$up[o])),
        col="pink", border=NA)
lines(x0[o], res_cp$pred[o], lwd=2, col="red")
points(x, y ,col="lightgray")

# CONFORMAL PREDICTION SPLINES-----------------------

funs = smooth.spline.funs(cv=TRUE)

res_cp = conformal.pred.split(x, y, x0, alpha=alpha,
			 train.fun=funs$train, 
			 predict.fun=funs$predict)
cov_cp = res_cp$lo <= y0 & y0 <= res_cp$up
len_cp = res_cp$up - res_cp$lo

plot(c(), c(), 	xlab="x", ylab="y", 
 		xlim=range(x0), ylim=range(c(y0,res_cp$lo,res_cp$up)), 
		col="white",
     		main=paste0("Conformal prediction \n",
       		sprintf("Coverage: %0.3f, Average Length: %0.3f",
               	mean(cov_cp),mean(len_cp)))) 
polygon(c(x0[o],rev(x0[o])), 
	c(res_cp$lo[o],rev(res_cp$up[o])),
        col="pink", border=NA)
lines(x0[o], res_cp$pred[o], lwd=2, col="red")
points(x, y ,col="lightgray")



# MARGINAL COVERAGE---------------------------------------------

alpha = 0.1
n = 19
n0 = 1
B = 2000
funs = lm.funs()
cov_lm = cov_cp = vector()
set.seed(123)

for (b in 1:B){
x = runif(n,-5,5)
y = 1/4 * (x+4) * (x+1) * (x-2) + rnorm(n, mean = 1)

x0 = runif(n0,-5,5)
y0 = 1/4 * (x0+4) * (x0+1) * (x0-2) + rnorm(n0, mean = 1)

res_lm <- predict(lm(y ~ poly(x,degree=3)), 
          newdata=data.frame(x=x0), 
          interval = "prediction",
          level = 1-alpha)[,-1]
cov_lm[b] = res_lm[1] <= y0 & y0 <= res_lm[2]

res_cp = conformal.pred.split(x, y, x0, alpha,
			 train.fun=funs$train, 
                          split = sample(n,n/2+1),
			 predict.fun=funs$predict)
cov_cp[b] = res_cp$lo <= y0 & y0 <= res_cp$up
}

mean(cov_lm)
mean(cov_cp)


# CONDITIONAL COVERAGE---------------------------------------------

funs = lm.funs()
cov_lm = cov_cp = vector()
set.seed(123)

for (b in 1:B){
x = runif(n,-5,5)
y = 1/4 * (x+4) * (x+1) * (x-2) + rnorm(n, mean = 1)

x0 = 4.5
y0 = 1/4 * (x0+4) * (x0+1) * (x0-2) + rnorm(n0, mean = 1)

res_lm <- predict(lm(y ~ poly(x,degree=3)), 
          newdata=data.frame(x=x0), 
          interval = "prediction",
          level = 1-alpha)[,-1]
cov_lm[b] = res_lm[1] <= y0 & y0 <= res_lm[2]

res_cp = conformal.pred.split(x, y, x0, alpha,
			 train.fun=funs$train, 
                          split = sample(n,n/2+1),
			 predict.fun=funs$predict)
cov_cp[b] = res_cp$lo <= y0 & y0 <= res_cp$up
}

mean(cov_lm)
mean(cov_cp)

