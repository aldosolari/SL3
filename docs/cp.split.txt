cp.split = function(x, y, x0, m,
                    alpha=0.1, 
                    gamma = alpha/2, 
                    split=NULL, seed=NULL) {
  
  require(quantregForest)
  
  # Set up data
  x = as.matrix(x)
  y = as.numeric(y)
  n = nrow(x)
  p = ncol(x)
  x0 = matrix(x0,ncol=p)
  n0 = nrow(x0)
  
  # If the user passed indices for the split, use them
  if (!is.null(split)) I = split
  # Otherwise make a random split
  else {
    if (!is.null(seed)) set.seed(seed)
    I = sample(1:n,m)
  }
  L = (1:n)[-I]
  nL = length(L)
  nI = length(I)
  
  # Learning
  out = quantregForest(x=x[L,,drop=F],y=y[L], nthreads=16)
  pred = matrix(predict(out,x0, what=c(gamma,1-gamma)),nrow=n0)
  
  # Inference
  res = apply( cbind(y[I],-y[I]) + matrix(predict(out,x[I,,drop=F], what=c(1-gamma,gamma)),nrow=nI) %*% diag(c(-1,1)),1,max )
  
  o = order(res)
  c = ceiling((1-alpha)*(m+1))
  r = res[o][c]
  
  lo = up = vector()
  
  for (i in 1:n0) {
      lo[i] = pred[i,1] - r 
      up[i] = pred[i,2] + r 
  }
  
  return(list(lo=lo,up=up,r=r))
}


